#include "TApplication.h"
#include "TCanvas.h"
#include "TF1.h"
#include "TFile.h"
#include "TFitResult.h"
#include "TH1F.h"
#include "TLegend.h"
#include "TMath.h"
#include "TMatrixD.h"
#include "TROOT.h"
#include "TRandom.h"
#include "TStyle.h"

void setStyle() {
  gROOT->SetStyle("Plain");
  gStyle->SetOptStat(2210);
  gStyle->SetPalette(57);
  gStyle->SetOptTitle(0);
}

void analysis() {
  // getting histograms from files
  TFile* file = new TFile("./histograms/histos.root");
  TH1F* hTypes = (TH1F*)file->Get("types");
  TH1F* hTheta = (TH1F*)file->Get("theta");
  TH1F* hPhi = (TH1F*)file->Get("phi");
  TH1F* hP = (TH1F*)file->Get("p");
  TH1F* hPTrans = (TH1F*)file->Get("pTrans");
  TH1F* hEnergy = (TH1F*)file->Get("energy");
  TH1F* hInvMass = (TH1F*)file->Get("invMass");
  TH1F* hInvMassDiscordant = (TH1F*)file->Get("invMassDiscordant");
  TH1F* hInvMassConcordant = (TH1F*)file->Get("invMassConcordant");
  TH1F* hInvMassDiscordantKP = (TH1F*)file->Get("invMassDiscordantKP");
  TH1F* hInvMassConcordantKP = (TH1F*)file->Get("invMassConcordantKP");
  TH1F* hInvMassDecay = (TH1F*)file->Get("invMassDecay");

  // subtracting invariant mass distributions:
  TH1F* hDiffInvMass = new TH1F(*hInvMassDiscordant);
  hDiffInvMass->SetTitle(
      "Difference of fr discordant charges;"
      "mass [Gev/c^{2}]; entries");
  hDiffInvMass->Add(hInvMassDiscordant, hInvMassConcordant, 1., -1.);

  TH1F* hDiffInvMassKP = new TH1F(*hInvMassDiscordantKP);
  hDiffInvMassKP->SetTitle(
      "Difference of invariant mass, only pions and kaons"
      ";mass [Gev/c^{2}]"
      "; entries");
  hDiffInvMassKP->Add(hInvMassDiscordantKP, hInvMassConcordantKP, 1., -1.);

  // changing type histogram axis name
  hTypes->GetXaxis()->SetBinLabel(1, "pion+");
  hTypes->GetXaxis()->SetBinLabel(2, "pion-");
  hTypes->GetXaxis()->SetBinLabel(3, "kaon+");
  hTypes->GetXaxis()->SetBinLabel(4, "kaon-");
  hTypes->GetXaxis()->SetBinLabel(5, "proton+");
  hTypes->GetXaxis()->SetBinLabel(6, "proton-");
  hTypes->GetXaxis()->SetBinLabel(7, "K*");

  // getting type histogram entries:
  for (int i{}; i < 7; ++i) {
    std::cout << "numero di particelle del tipo "
              << hTypes->GetXaxis()->GetBinLabel(i + 1) << ": "
              << hTypes->GetBinContent(i + 1) << " +/- "
              << hTypes->GetBinError(i + 1) << '\n';
  }

  // defining functions for histogram fit:
  TF1* phiFit = new TF1("phiFit", "pol0", 0., 2 * TMath::Pi());
  TF1* thetaFit = new TF1("thetaFit", "pol0", 0., TMath::Pi());
  TF1* pFit = new TF1("pFit", "expo", 0., 10.);
  TF1* diffInvMassFit = new TF1("diffInvMassFit", "gaus", 0., 10.);
  TF1* diffInvMassKPFit = new TF1("diffInvMassKPFit", "gaus", 0., 10.);

  // initializing fit parameters:
  phiFit->SetParameter(0, 10e5);
  thetaFit->SetParameter(0, 10e5);
  pFit->SetParameter(0, 1.);
  pFit->SetParameter(1, 1.);
  diffInvMassFit->SetParameter(0, 10.);
  diffInvMassFit->SetParameter(1, 1.);
  diffInvMassFit->SetParameter(2, 0.1);
  diffInvMassKPFit->SetParameter(0, 10.);
  diffInvMassKPFit->SetParameter(1, 1.);
  diffInvMassKPFit->SetParameter(2, 0.1);

  //------------------- draw histograms -------------------
  gStyle->SetOptFit(0);
  //--- Types ---
  TCanvas* cTypes =
      new TCanvas("cTypes", "number of particles generated by type", 800, 800);

  hTypes->SetLineWidth(2);
  hTypes->SetLineColor(kBlack);
  hTypes->SetMarkerStyle(kFullCircle);
  hTypes->SetMarkerSize(0.8);
  hTypes->SetMarkerColor(kBlack);
  hTypes->SetFillColor(kBlue);
  hTypes->SetTitle(
      "number of particles generated by type; particle type; entries");
  cTypes->SetLeftMargin(0.127);
  cTypes->SetRightMargin(0.071);
  hTypes->Draw("H");
  hTypes->Draw("E,P,SAME");

  cTypes->Print("./histograms/canvasTypes.pdf");
  cTypes->Print("./histograms/canvasTypes.root");
  cTypes->Print("./histograms/canvasTypes.C");

  gStyle->SetOptFit(1111);

  //--- Angles ---
  TCanvas* cAngles = new TCanvas("cAngles", "angle canvas", 800, 800);
  cAngles->Divide(1, 2);
  cAngles->cd(1);

  thetaFit->SetLineColor(kOrange + 7);
  thetaFit->SetLineWidth(3);
  thetaFit->SetLineStyle(7);
  hTheta->Fit("thetaFit", "Q");

  hTheta->SetLineWidth(1);
  hTheta->SetLineColor(kBlack);
  hTheta->SetTitle("theta distribution; angle [rad]; entries");
  hTheta->SetMarkerStyle(kFullCircle);
  hTheta->SetMarkerSize(0.8);
  hTheta->SetMarkerColor(kBlack);
  hTheta->SetFillColor(kBlue);
  hTheta->SetMinimum(0);
  hTheta->SetMaximum(35000);
  hTheta->Draw("H");
  hTheta->Draw("E,P,SAME");

  TLegend* lTheta = new TLegend(.1, .7, .3, .9, "theta legend");
  lTheta->SetFillColor(0);
  lTheta->AddEntry(hTheta, "polar angle distribution");
  lTheta->AddEntry(thetaFit, "uniform fit");
  lTheta->Draw();

  cAngles->cd(2);

  phiFit->SetLineColor(kOrange + 7);
  phiFit->SetLineWidth(3);
  phiFit->SetLineStyle(7);
  hPhi->Fit("phiFit", "Q");

  hPhi->SetLineWidth(1);
  hPhi->SetLineColor(kBlack);
  hPhi->SetTitle("phi distribution; angle [rad]; entries");
  hPhi->SetMarkerStyle(kFullCircle);
  hPhi->SetMarkerSize(0.8);
  hPhi->SetMarkerColor(kBlack);
  hPhi->SetFillColor(kBlue);
  hPhi->SetMinimum(0);
  hPhi->SetMaximum(35000);
  hPhi->Draw("H");
  hPhi->Draw("E,P,SAME");

  TLegend* lPhi = new TLegend(.1, .7, .3, .9, "phi legend");
  lPhi->SetFillColor(0);
  lPhi->AddEntry(hPhi, "azimuthal angle distribution");
  lPhi->AddEntry(phiFit, "uniform fit");
  lPhi->Draw();

  cAngles->Print("./histograms/canvasAngles.pdf");
  cAngles->Print("./histograms/canvasAngles.root");
  cAngles->Print("./histograms/canvasAngles.C");

  //--- Momentum ---
  TCanvas* cP = new TCanvas("cP", "momentum canvas", 800, 800);
  cP->Divide(1, 2);
  cP->cd(1);

  pFit->SetLineColor(kYellow);
  pFit->SetLineWidth(3);
  pFit->SetLineStyle(7);
  hP->Fit("pFit", "Q");

  hP->SetLineWidth(1);
  hP->SetLineColor(kBlack);
  hP->SetTitle("momentum distribution; momentum [GeV/c]; entries");
  hP->SetMarkerStyle(kFullCircle);
  hP->SetMarkerSize(0.8);
  hP->SetMarkerColor(kBlack);
  hP->SetFillColor(kRed);
  hP->SetMinimum(0);
  hP->GetXaxis()->SetRangeUser(0, 7);
  hP->Draw("H");
  hP->Draw("E,P,SAME");

  TLegend* lP = new TLegend(.1, .7, .3, .9, "momentum legend");
  lP->SetFillColor(0);
  lP->AddEntry(hP, "momentum distribution");
  lP->AddEntry(pFit, "exponential fit");
  lP->Draw();

  cP->cd(2);

  hPTrans->SetLineWidth(1);
  hPTrans->SetLineColor(kBlack);
  hPTrans->SetTitle(
      "transverse momentum distribution; transverse momentum [GeV/c]; entries");
  hPTrans->SetMarkerStyle(kFullCircle);
  hPTrans->SetMarkerSize(0.8);
  hPTrans->SetMarkerColor(kBlack);
  hPTrans->SetFillColor(kRed);
  hPTrans->SetMinimum(0);
  hPTrans->GetXaxis()->SetRangeUser(0, 4);
  hPTrans->Draw("H");
  hPTrans->Draw("E,P,SAME");

  cP->Print("./histograms/canvasMomentum.pdf");
  cP->Print("./histograms/canvasMomentum.root");
  cP->Print("./histograms/canvasMomentum.C");

  //--- Energy ---
  gStyle->SetOptFit(0);
  TCanvas* cEnergy = new TCanvas("cEnergy", "energy canvas", 800, 800);

  hEnergy->SetLineWidth(1);
  hEnergy->SetLineColor(kBlack);
  hEnergy->SetTitle("energy distribution; energy [GeV]; entries");
  hEnergy->SetMarkerStyle(kFullCircle);
  hEnergy->SetMarkerSize(0.8);
  hEnergy->SetMarkerColor(kBlack);
  hEnergy->SetFillColor(kOrange);
  hEnergy->SetMinimum(0);
  hEnergy->Draw("H");
  hEnergy->Draw("E,P,SAME");
  hEnergy->GetXaxis()->SetRangeUser(0, 7);

  cEnergy->Print("./histograms/canvasEnergy.pdf");
  cEnergy->Print("./histograms/canvasEnergy.root");
  cEnergy->Print("./histograms/canvasEnergy.C");

  //--- Inv Mass ---
  TCanvas* cInvMass =
      new TCanvas("cInvMass", "invariant mass canvas", 800, 800);

  cInvMass->SetLeftMargin(0.13);
  cInvMass->SetRightMargin(0.07);

  hInvMass->SetLineWidth(1);
  hInvMass->SetLineColor(kBlack);
  hInvMass->SetTitle("invariant mass distribution; mass [Gev/c^{2}]; entries");
  hInvMass->SetMarkerStyle(kFullCircle);
  hInvMass->SetMarkerSize(0.8);
  hInvMass->SetMarkerColor(kBlack);
  hInvMass->SetFillColor(kTeal);
  hInvMass->SetMinimum(0);
  hInvMass->Draw("H");
  hInvMass->Draw("E,P,SAME");

  cInvMass->Print("./histograms/canvasInvMass.pdf");
  cInvMass->Print("./histograms/canvasInvMass.root");
  cInvMass->Print("./histograms/canvasInvMass.C");

  //--- Inv Mass for concordant discordant ---
  gStyle->SetOptFit(0);
  TCanvas* cInvMassCharges = new TCanvas(
      "cInvMassCharges",
      "invariant mass canvas for concordant/discordant charges", 800, 800);

  cInvMassCharges->Divide(2, 2);
  cInvMassCharges->cd(1);

  hInvMassDiscordant->SetLineWidth(1);
  hInvMassDiscordant->SetLineColor(kBlack);
  hInvMassDiscordant->SetTitle(
      "invariant mass distribution for discordant charge; mass "
      "[Gev/c^{2}]; entries");
  hInvMassDiscordant->SetMarkerStyle(kFullCircle);
  hInvMassDiscordant->SetMarkerSize(0.8);
  hInvMassDiscordant->SetMarkerColor(kBlack);
  hInvMassDiscordant->SetFillColor(kTeal);
  hInvMassDiscordant->SetMinimum(0);
  hInvMassDiscordant->Draw("H");
  hInvMassDiscordant->Draw("E,P,SAME");

  cInvMassCharges->cd(2);

  hInvMassConcordant->SetLineWidth(1);
  hInvMassConcordant->SetLineColor(kBlack);
  hInvMassConcordant->SetTitle(
      "invariant mass distribution for concordant charges; mass "
      "[Gev/c^{2}]; entries");
  hInvMassConcordant->SetMarkerStyle(kFullCircle);
  hInvMassConcordant->SetMarkerSize(0.8);
  hInvMassConcordant->SetMarkerColor(kBlack);
  hInvMassConcordant->SetFillColor(kTeal);
  hInvMassConcordant->SetMinimum(0);
  hInvMassConcordant->Draw("H");
  hInvMassConcordant->Draw("E,P,SAME");

  cInvMassCharges->cd(3);
  hInvMassDiscordantKP->SetLineWidth(1);
  hInvMassDiscordantKP->SetLineColor(kBlack);
  hInvMassDiscordantKP->SetTitle(
      "invariant mass distribution for discordant charges (only kaons or "
      "pions); mass "
      "[Gev/c^{2}]; entries");
  hInvMassDiscordantKP->SetMarkerStyle(kFullCircle);
  hInvMassDiscordantKP->SetMarkerSize(0.8);
  hInvMassDiscordantKP->SetMarkerColor(kBlack);
  hInvMassDiscordantKP->SetFillColor(kTeal);
  hInvMassDiscordantKP->SetMinimum(0);
  hInvMassDiscordantKP->Draw("H");
  hInvMassDiscordantKP->Draw("E,P,SAME");

  cInvMassCharges->cd(4);
  hInvMassConcordantKP->SetLineWidth(1);
  hInvMassConcordantKP->SetLineColor(kBlack);
  hInvMassConcordantKP->SetTitle(
      "invariant mass distribution for concordant charges(only kaons or "
      "pions); mass [Gev/c^{2}]; "
      "entries");
  hInvMassConcordantKP->SetMarkerStyle(kFullCircle);
  hInvMassConcordantKP->SetMarkerSize(0.8);
  hInvMassConcordantKP->SetMarkerColor(kBlack);
  hInvMassConcordantKP->SetFillColor(kTeal);
  hInvMassConcordantKP->SetMinimum(0);
  hInvMassConcordantKP->Draw("H");
  hInvMassConcordantKP->Draw("E,P,SAME");

  cInvMassCharges->Print("./histograms/canvasChargesInvMass.pdf");
  cInvMassCharges->Print("./histograms/canvasChargesInvMass.root");
  cInvMassCharges->Print("./histograms/canvasChargesInvMass.C");

  //--- Inv Mass for decayed ---
  TCanvas* cInvMassDecayed = new TCanvas(
      "cInvMassDecayed",
      "invariant mass canvas for particles generated by decay", 800, 800);

  cInvMassDecayed->SetLeftMargin(0.15);

  hInvMassDecay->SetLineWidth(1);
  hInvMassDecay->SetLineColor(kBlack);
  hInvMassDecay->SetTitle(
      "invariant mass distribution for particles generated by decay;"
      "mass [Gev/c^{2}]; entries");
  hInvMassDecay->SetMarkerStyle(kFullCircle);
  hInvMassDecay->SetMarkerSize(0.8);
  hInvMassDecay->SetMarkerColor(kBlack);
  hInvMassDecay->SetFillColor(kTeal);
  hInvMassDecay->SetMinimum(0);
  hInvMassDecay->Draw("H");
  hInvMassDecay->Draw("E,P,SAME");

  cInvMassDecayed->Print("./histograms/canvasDecayInvMass.pdf");
  cInvMassDecayed->Print("./histograms/canvasDecayInvMass.root");
  cInvMassDecayed->Print("./histograms/canvasDecayInvMass.C");

  //--- Differences of Inv Mass ---
  gStyle->SetOptStat(2200);
  gStyle->SetOptFit(1111);
  TCanvas* cDiff =
      new TCanvas("cDiff", "differences of invariant mass canvas", 800, 800);
  cDiff->Divide(1, 2);
  cDiff->cd(1);

  diffInvMassFit->SetLineColor(kPink);
  diffInvMassFit->SetLineWidth(3);
  diffInvMassFit->SetLineStyle(7);
  diffInvMassFit->SetNpx(1000);
  hDiffInvMass->Fit("diffInvMassFit", "Q");

  hDiffInvMass->SetLineWidth(1);
  hDiffInvMass->SetLineColor(kBlack);
  hDiffInvMass->SetMarkerStyle(kFullCircle);
  hDiffInvMass->SetMarkerSize(0.8);
  hDiffInvMass->SetMarkerColor(kBlack);
  hDiffInvMass->SetFillColor(kGreen - 6);
  hDiffInvMass->SetMinimum(0);
  hDiffInvMass->GetXaxis()->SetRangeUser(0, 2);
  hDiffInvMass->Draw("H");
  hDiffInvMass->Draw("E,P,SAME");
  
  TLegend* lDiffInvMass =
      new TLegend(.1, .7, .3, .9, "difference inv. mass legend");
  lDiffInvMass->SetFillColor(0);
  lDiffInvMass->AddEntry(hDiffInvMass, "difference inv. mass distribution");
  lDiffInvMass->AddEntry(diffInvMassFit, "gaussian fit");
  lDiffInvMass->Draw();

  cDiff->cd(2);

  diffInvMassKPFit->SetLineColor(kPink);
  diffInvMassKPFit->SetLineWidth(3);
  diffInvMassKPFit->SetLineStyle(7);
  diffInvMassKPFit->SetNpx(1000);
  hDiffInvMassKP->Fit("diffInvMassKPFit", "Q");

  hDiffInvMassKP->SetLineWidth(1);
  hDiffInvMassKP->SetLineColor(kBlack);
  hDiffInvMassKP->SetMarkerStyle(kFullCircle);
  hDiffInvMassKP->SetMarkerSize(0.8);
  hDiffInvMassKP->SetMarkerColor(kBlack);
  hDiffInvMassKP->SetFillColor(kGreen - 6);
  hDiffInvMassKP->SetMinimum(0);
  hDiffInvMassKP->GetXaxis()->SetRangeUser(0, 2);
  hDiffInvMassKP->Draw("H");
  hDiffInvMassKP->Draw("E,P,SAME");

  TLegend* lDiffInvMassKP =
      new TLegend(.1, .7, .3, .9, "difference inv. mass kaons & pions legend");
  lDiffInvMassKP->SetFillColor(0);
  lDiffInvMassKP->AddEntry(hDiffInvMassKP,
                           "difference inv. mass kaons & pions distribution");
  lDiffInvMassKP->AddEntry(diffInvMassKPFit, "gaussian fit");
  lDiffInvMassKP->Draw();

  cDiff->Print("./histograms/canvasDifferenceInvMass.pdf");
  cDiff->Print("./histograms/canvasDifferenceInvMass.root");
  cDiff->Print("./histograms/canvasDifferenceInvMass.C");

  // printing fit results:
  std::cout << "fit angoli phi:\naltezza fit uniforme: "
            << phiFit->GetParameter(0) << " +/- " << phiFit->GetParError(0)
            << "\nchi^2/NDF: " << (phiFit->GetChisquare()) / (phiFit->GetNDF())
            << "\nchi^2 probability: " << phiFit->GetProb() << '\n';

  std::cout << "fit angoli theta:\naltezza fit uniforme: "
            << thetaFit->GetParameter(0) << " +/- " << thetaFit->GetParError(0)
            << "\nchi^2/NDF: "
            << (thetaFit->GetChisquare()) / (thetaFit->GetNDF())
            << "\nchi^2 probability: " << thetaFit->GetProb() << '\n';

  std::cout << "fit esponenziale quantità di moto:\nprimo parametro: "
            << pFit->GetParameter(0) << " +/- " << pFit->GetParError(0)
            << "\nsecondo parametro: " << pFit->GetParameter(1) << " +/- "
            << pFit->GetParError(1)
            << "\nchi^2/NDF: " << (pFit->GetChisquare()) / (pFit->GetNDF())
            << "\nchi^2 probability: " << pFit->GetProb() << '\n';

  std::cout << "fit gaussiana differenza degli istogrammi di massa invariante "
               "cariche discordi e concordi:\nprimo parametro: "
            << diffInvMassFit->GetParameter(0) << " +/- "
            << diffInvMassFit->GetParError(0)
            << "\nmedia: " << diffInvMassFit->GetParameter(1) << " +/- "
            << diffInvMassFit->GetParError(1)
            << "\nstd: " << diffInvMassFit->GetParameter(2) << " +/- "
            << diffInvMassFit->GetParError(2) << "\nchi^2/NDF: "
            << (diffInvMassFit->GetChisquare()) / (diffInvMassFit->GetNDF())
            << "\nchi^2 probability: " << diffInvMassFit->GetProb() << '\n';

  std::cout
      << "fit gaussiana differenza degli istogrammi di massa invariante "
         "cariche discordi e concordi tra kaoni e pioni:\nprimo parametro: "
      << diffInvMassKPFit->GetParameter(0) << " +/- "
      << diffInvMassKPFit->GetParError(0)
      << "\nmedia: " << diffInvMassKPFit->GetParameter(1) << " +/- "
      << diffInvMassKPFit->GetParError(1)
      << "\nstd: " << diffInvMassKPFit->GetParameter(2) << " +/- "
      << diffInvMassKPFit->GetParError(2) << "\nchi^2/NDF: "
      << (diffInvMassKPFit->GetChisquare()) / (diffInvMassKPFit->GetNDF())
      << "\nchi^2 probability: " << diffInvMassKPFit->GetProb() << '\n';
}
